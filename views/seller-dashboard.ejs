<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Flipkart Seller Dashboard - <%= sellerData.profile.businessName %></title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        .dashboard-header {
            background: linear-gradient(135deg, #2874f0, #1a5bb8);
            color: white;
            padding: 20px 0;
            margin-bottom: 30px;
        }
        
        .stats-card {
            background: white;
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            margin-bottom: 20px;
            transition: transform 0.3s ease;
        }
        
        .stats-card:hover {
            transform: translateY(-5px);
        }
        
        .stats-icon {
            font-size: 2.5rem;
            margin-bottom: 15px;
        }
        
        .stats-number {
            font-size: 2rem;
            font-weight: bold;
            color: #2874f0;
        }
        
        .stats-label {
            color: #666;
            font-size: 0.9rem;
            text-transform: uppercase;
            letter-spacing: 1px;
        }
        
        .section-title {
            color: #333;
            font-weight: 600;
            margin-bottom: 20px;
            border-left: 4px solid #2874f0;
            padding-left: 15px;
        }
        
        .table {
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 3px 10px rgba(0,0,0,0.1);
        }
        
        .table thead {
            background: #2874f0;
            color: white;
        }
        
        .btn-flipkart {
            background: #2874f0;
            border: none;
            color: white;
            padding: 8px 20px;
            border-radius: 20px;
            transition: all 0.3s ease;
        }
        
        .btn-flipkart:hover {
            background: #1a5bb8;
            transform: translateY(-2px);
        }
        
        .status-badge {
            padding: 5px 12px;
            border-radius: 15px;
            font-size: 0.8rem;
            font-weight: 500;
        }
        
        .status-processing { background: #f8d7da; color: #721c24; }
        .status-shipped { background: #d1ecf1; color: #0c5460; }
        .status-delivered { background: #d4edda; color: #155724; }
        .status-cancelled { background: #f8d7da; color: #721c24; }
        .status-pending { background: #fff3cd; color: #856404; }
        .status-confirmed { background: #fff3cd; color: #856404; }
        .status-returned { background: #f8d7da; color: #721c24; }
        /* Chat Interface Styles */
        .chat-container {
            position: fixed;
            bottom: 20px;
            right: 20px;
            width: 600px;
            height: 500px;
            background: white;
            border-radius: 20px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            display: flex;
            flex-direction: column;
            z-index: 1000;
            overflow: hidden;
        }
        
        .chat-header {
            background: linear-gradient(135deg, #2874f0, #1a5bb8);
            color: white;
            padding: 15px 20px;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }
        
        .chat-header h6 {
            margin: 0;
            font-weight: 600;
        }
        
        .chat-toggle {
            position: fixed;
            bottom: 20px;
            right: 20px;
            width: 60px;
            height: 60px;
            background: linear-gradient(135deg, #2874f0, #1a5bb8);
            color: white;
            border: none;
            border-radius: 50%;
            font-size: 24px;
            cursor: pointer;
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
            z-index: 1001;
            transition: all 0.3s ease;
        }
        
        .chat-toggle:hover {
            transform: scale(1.1);
        }
        
        .chat-messages {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
            background: #f8f9fa;
        }
        
        .message {
            margin-bottom: 15px;
            display: flex;
            align-items: flex-start;
        }
        
        .message.user {
            justify-content: flex-end;
        }
        
        .message-content {
            max-width: 80%;
            padding: 12px 16px;
            border-radius: 18px;
            font-size: 14px;
            line-height: 1.4;
        }
        
        .message.assistant .message-content {
            background: white;
            color: #333;
            border: 1px solid #e1e5e9;
        }
        
        .message.user .message-content {
            background: #2874f0;
            color: white;
        }
        
        .message-avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            margin: 0 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 14px;
            font-weight: bold;
        }
        
        .message.assistant .message-avatar {
            background: #2874f0;
            color: white;
        }
        
        .message.user .message-avatar {
            background: #28a745;
            color: white;
        }
        
        .chat-input-container {
            padding: 15px 20px;
            border-top: 1px solid #e1e5e9;
            background: white;
        }
        
        .chat-input-group {
            display: flex;
            gap: 10px;
        }
        
        .chat-input {
            flex: 1;
            border: 1px solid #e1e5e9;
            border-radius: 25px;
            padding: 10px 15px;
            font-size: 14px;
            outline: none;
        }
        
        .chat-input:focus {
            border-color: #2874f0;
        }
        
        .chat-send-btn {
            background: #2874f0;
            color: white;
            border: none;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .chat-send-btn:hover {
            background: #1a5bb8;
        }
        
        .chat-hidden {
            display: none;
        }
        
        .typing-indicator {
            display: none;
            padding: 12px 16px;
            background: white;
            border-radius: 18px;
            border: 1px solid #e1e5e9;
            margin-bottom: 15px;
        }
        
        .typing-dots {
            display: flex;
            gap: 4px;
        }
        
        .typing-dot {
            width: 8px;
            height: 8px;
            background: #2874f0;
            border-radius: 50%;
            animation: typing 1.4s infinite ease-in-out;
        }
        
        .typing-dot:nth-child(1) { animation-delay: -0.32s; }
        .typing-dot:nth-child(2) { animation-delay: -0.16s; }
        
        @keyframes typing {
            0%, 80%, 100% { transform: scale(0.8); opacity: 0.5; }
            40% { transform: scale(1); opacity: 1; }
        }
        
        .suggestion-chips {
            display: flex;
            gap: 8px;
            margin-top: 10px;
            flex-wrap: wrap;
        }
        
        .suggestion-chip {
            background: #f8f9fa;
            border: 1px solid #e1e5e9;
            border-radius: 15px;
            padding: 6px 12px;
            font-size: 12px;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .suggestion-chip:hover {
            background: #2874f0;
            color: white;
            border-color: #2874f0;
        }
        
        .logout-btn {
            position: absolute;
            top: 20px;
            right: 20px;
            background: rgba(255,255,255,0.2);
            border: 1px solid rgba(255,255,255,0.3);
            color: white;
            padding: 8px 16px;
            border-radius: 20px;
            text-decoration: none;
            transition: all 0.3s ease;
        }
        
        .logout-btn:hover {
            background: rgba(255,255,255,0.3);
            color: white;
        }
        
        /* AI Summary Styles */
        .ai-summary-container {
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            border-radius: 15px;
            padding: 20px;
            margin: 10px 0;
            border: 1px solid #dee2e6;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        
        .summary-header h3 {
            color: #2874f0;
            margin-bottom: 20px;
            text-align: center;
            font-size: 1.3rem;
            font-weight: 600;
        }
        
        .summary-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
        }
        
        .summary-card {
            background: white;
            padding: 20px;
            border-radius: 12px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            text-align: center;
            transition: transform 0.3s ease;
        }
        
        .summary-card:hover {
            transform: translateY(-2px);
        }
        
        .summary-card h4 {
            color: #495057;
            margin-bottom: 15px;
            font-size: 1rem;
            font-weight: 600;
        }
        
        .stats-number {
            font-size: 1.8rem;
            font-weight: bold;
            color: #2874f0;
            margin-bottom: 5px;
        }
        
        .sales-list {
            display: flex;
            flex-direction: column;
            gap: 10px;
        }
        
        .sales-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px 15px;
            background: #f8f9fa;
            border-radius: 8px;
            border-left: 4px solid #2874f0;
        }
        
        .sales-date {
            color: #495057;
            font-weight: 500;
            min-width: 100px;
        }
        
        .sales-orders {
            color: #6c757d;
            font-size: 0.9rem;
        }
        
        .sales-amount {
            color: #28a745;
            font-weight: 600;
            font-size: 1.1rem;
        }
        
        .alert-section {
            border-left: 4px solid #ffc107;
        }
        
        .alert-section h4 {
            color: #856404;
        }
        
        .warning {
            color: #ffc107;
            font-weight: 600;
        }
        
        .danger {
            color: #dc3545;
            font-weight: 600;
        }
        
        .summary-section {
            background: white;
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 15px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        
        .summary-section h4 {
            color: #495057;
            margin-bottom: 15px;
            font-size: 1rem;
            font-weight: 600;
        }
        
        .product-list, .order-list, .alert-list {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }
        
        .product-item, .order-item, .alert-item {
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 8px 12px;
            background: #f8f9fa;
            border-radius: 8px;
            font-size: 0.85rem;
        }
        
        .product-number {
            background: #2874f0;
            color: white;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.7rem;
            font-weight: bold;
        }
        
        .product-name {
            flex: 1;
            font-weight: 500;
        }
        
        .product-price {
            color: #28a745;
            font-weight: 600;
        }
        
        .product-stock {
            color: #6c757d;
            font-size: 0.8rem;
        }
        
        .product-category {
            color: #6c757d;
            font-size: 0.8rem;
            background: #e9ecef;
            padding: 2px 6px;
            border-radius: 4px;
        }
        
        .low-stock {
            color: #dc3545;
            font-weight: 600;
        }
        
        .order-number {
            background: #28a745;
            color: white;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.7rem;
            font-weight: bold;
        }
        
        .order-id {
            color: #2874f0;
            font-weight: 600;
        }
        
        .order-customer {
            flex: 1;
        }
        
        .order-amount {
            color: #28a745;
            font-weight: 600;
        }
        
        .order-status {
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 0.75rem;
            font-weight: 500;
            text-transform: capitalize;
        }
        
        .alert-item {
            background: #fff3cd;
            border-left: 4px solid #ffc107;
        }
        
        .alert-icon {
            font-size: 1.1rem;
        }
        
        .alert-text {
            flex: 1;
            color: #856404;
        }
        
        .insights-grid {
            display: grid;
            grid-template-columns: 1fr;
            gap: 10px;
        }
        
        .insight-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 8px 12px;
            background: #e3f2fd;
            border-radius: 8px;
        }
        
        .insight-label {
            color: #1976d2;
            font-weight: 500;
        }
        
        .insight-value {
            color: #1565c0;
            font-weight: 600;
        }
        
        .summary-footer {
            text-align: center;
            margin-top: 15px;
            padding-top: 15px;
            border-top: 1px solid #dee2e6;
        }
        
        .summary-footer p {
            color: #6c757d;
            margin: 0;
            font-style: italic;
        }
    </style>
</head>
<body>
    <!-- Dashboard Header -->
    <div class="dashboard-header">
        <div class="container">
            <div class="row align-items-center">
                <div class="col-md-8">
                    <h2><i class="fas fa-shopping-cart"></i> Flipkart Seller Dashboard</h2>
                    <p class="mb-0">Welcome back, <%= sellerData.profile.ownerName %>!</p>
                </div>
                <div class="col-md-4 text-end">
                    <div class="d-flex justify-content-end align-items-center">
                        <a href="/seller-dashboard" class="btn btn-outline-light me-2">
                            <i class="fas fa-tachometer-alt"></i> Dashboard
                        </a>
                        <a href="/profile" class="btn btn-outline-light me-2">
                            <i class="fas fa-user"></i> Profile
                        </a>
                        <a href="/chat-logs" class="btn btn-outline-light me-2">
                            <i class="fas fa-comments"></i> Chat Logs
                        </a>
                        <a href="/order-history-page" class="btn btn-outline-light me-2">
                            <i class="fas fa-history"></i> Order History
                        </a>
                        <a href="/logout" class="logout-btn">
                            <i class="fas fa-sign-out-alt"></i> Logout
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="container">
        <!-- Analytics Section -->
        <div class="row mb-4">
            <div class="col-md-3">
                <div class="stats-card text-center">
                    <div class="stats-icon text-primary">
                        <i class="fas fa-rupee-sign"></i>
                    </div>
                    <div class="stats-number">₹<%= sellerData.analytics.totalRevenue.toLocaleString() %></div>
                    <div class="stats-label">Total Revenue</div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="stats-card text-center">
                    <div class="stats-icon text-success">
                        <i class="fas fa-shopping-bag"></i>
                    </div>
                    <div class="stats-number"><%= sellerData.analytics.totalOrders %></div>
                    <div class="stats-label">Total Orders</div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="stats-card text-center">
                    <div class="stats-icon text-warning">
                        <i class="fas fa-clock"></i>
                    </div>
                    <div class="stats-number"><%= sellerData.analytics.pendingOrders %></div>
                    <div class="stats-label">Pending Orders</div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="stats-card text-center">
                    <div class="stats-icon text-danger">
                        <i class="fas fa-exclamation-triangle"></i>
                    </div>
                    <div class="stats-number"><%= sellerData.analytics.lowStockItems %></div>
                    <div class="stats-label">Low Stock Items</div>
                </div>
            </div>
        </div>

        <!-- Products Section -->
        <div class="row mb-4">
            <div class="col-12">
                <h4 class="section-title">
                    <i class="fas fa-box"></i> Products
                </h4>
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Product</th>
                                <th>Category</th>
                                <th>Price</th>
                                <th>Stock</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% sellerData.products.forEach(product => { %>
                            <tr data-product-id="<%= product.id %>">
                                <td>
                                    <strong><%= product.name %></strong><br>
                                    <small class="text-muted"><%= product.description %></small>
                                </td>
                                <td><%= product.category %></td>
                                <td>₹<%= product.price.toLocaleString() %></td>
                                <td>
                                    <span class="<%= product.stock < 10 ? 'text-danger' : 'text-success' %>">
                                        <%= product.stock %> units
                                    </span>
                                </td>
                                <td>
                                    <span class="status-badge <%= product.status === 'active' ? 'status-delivered' : 'status-processing' %>">
                                        <%= product.status %>
                                    </span>
                                </td>
                                <td>
                                    <button class="btn btn-sm btn-flipkart" onclick="editProduct(<%= product.id %>)">
                                        <i class="fas fa-edit"></i> Edit
                                    </button>
                                </td>
                            </tr>
                            <% }); %>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Orders Section -->
        <div class="row mb-4">
            <div class="col-12">
                <h4 class="section-title">
                    <i class="fas fa-list-alt"></i> Recent Orders
                </h4>
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Order ID</th>
                                <th>Customer</th>
                                <th>Products</th>
                                <th>Total</th>
                                <th>Status</th>
                                <th>Date</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% sellerData.orders.forEach(order => { %>
                            <tr data-order-id="<%= order.id %>">
                                <td><strong><%= order.id %></strong></td>
                                <td><%= order.customerName %></td>
                                <td><%= order.products.join(', ') %></td>
                                <td>₹<%= order.total.toLocaleString() %></td>
                                <td>
                                    <span class="status-badge status-<%= order.status %>">
                                        <%= order.status %>
                                    </span>
                                </td>
                                <td><%= new Date(order.date).toLocaleDateString() %></td>
                                <td>
                                    <button class="btn btn-sm btn-flipkart" onclick="updateOrderStatus('<%= order.id %>')">
                                        <i class="fas fa-edit"></i> Update Status
                                    </button>
                                </td>
                            </tr>
                            <% }); %>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- Product Edit Modal -->
    <div class="modal fade" id="editProductModal" tabindex="-1" aria-labelledby="editProductModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editProductModalLabel">Edit Product</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="editProductForm">
                        <input type="hidden" id="editProductId">
                        <div class="mb-3">
                            <label for="editProductName" class="form-label">Product Name</label>
                            <input type="text" class="form-control" id="editProductName" required>
                        </div>
                        <div class="mb-3">
                            <label for="editProductPrice" class="form-label">Price (₹)</label>
                            <input type="number" class="form-control" id="editProductPrice" min="0" step="0.01" required>
                        </div>
                        <div class="mb-3">
                            <label for="editProductStock" class="form-label">Stock</label>
                            <input type="number" class="form-control" id="editProductStock" min="0" required>
                        </div>
                        <div class="mb-3">
                            <label for="editProductCategory" class="form-label">Category</label>
                            <select class="form-control" id="editProductCategory" required>
                                <option value="Electronics">Electronics</option>
                                <option value="Accessories">Accessories</option>
                                <option value="Office Supplies">Office Supplies</option>
                                <option value="Home & Garden">Home & Garden</option>
                                <option value="Fashion">Fashion</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="editProductDescription" class="form-label">Description</label>
                            <textarea class="form-control" id="editProductDescription" rows="3"></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-flipkart" onclick="saveProductChanges()">Save Changes</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Order Status Update Modal -->
    <div class="modal fade" id="updateOrderStatusModal" tabindex="-1" aria-labelledby="updateOrderStatusModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="updateOrderStatusModalLabel">Update Order Status</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="updateOrderStatusForm">
                        <input type="hidden" id="updateOrderId">
                        <div class="mb-3">
                            <label for="updateOrderStatus" class="form-label">Order Status</label>
                            <select class="form-control" id="updateOrderStatus" required>
                                <option value="processing">Processing</option>
                                <option value="confirmed">Confirmed</option>
                                <option value="shipped">Shipped</option>
                                <option value="delivered">Delivered</option>
                                <option value="cancelled">Cancelled</option>
                                <option value="returned">Returned</option>
                            </select>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-flipkart" onclick="saveOrderStatusChanges()">Update Status</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Chat Toggle Button -->
    <button class="chat-toggle" onclick="toggleChat()" id="chatToggle">
        <i class="fas fa-comments"></i>
    </button>

    <!-- Chat Container -->
    <div class="chat-container chat-hidden" id="chatContainer">
        <div class="chat-header">
            <h6><i class="fas fa-robot"></i> Flipkart Assistant</h6>
            <button class="btn btn-sm btn-light" onclick="toggleChat()">
                <i class="fas fa-times"></i>
            </button>
        </div>
        
        <div class="chat-messages" id="chatMessages">
            <div class="message assistant">
                <div class="message-avatar">A</div>
                <div class="message-content">
                    Hello! I'm your Flipkart seller assistant. I can help you manage your products, orders, and business profile. Try asking me to:
                    <div class="suggestion-chips">
                        <div class="suggestion-chip" onclick="sendSuggestion('Update the price of Wireless Bluetooth Headphones to ₹6999')">Update product price</div>
                        <div class="suggestion-chip" onclick="sendSuggestion('Change order ORD003 status to shipped')">Update order status</div>
                        <div class="suggestion-chip" onclick="sendSuggestion('Add a new product called Gaming Mouse')">Add new product</div>
                        <div class="suggestion-chip" onclick="sendSuggestion('Update my business phone number')">Update profile</div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="typing-indicator" id="typingIndicator">
            <div class="typing-dots">
                <div class="typing-dot"></div>
                <div class="typing-dot"></div>
                <div class="typing-dot"></div>
            </div>
        </div>
        
        <div class="chat-input-container">
            <div class="chat-input-group">
                <input type="text" class="chat-input" id="chatInput" placeholder="Ask me anything about your business..." onkeypress="handleKeyPress(event)">
                <button class="chat-send-btn" onclick="sendMessage()">
                    <i class="fas fa-paper-plane"></i>
                </button>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        let chatVisible = false;
        
        function toggleChat() {
            const container = document.getElementById('chatContainer');
            const toggle = document.getElementById('chatToggle');
            
            if (chatVisible) {
                container.classList.add('chat-hidden');
                toggle.style.display = 'block';
            } else {
                container.classList.remove('chat-hidden');
                toggle.style.display = 'none';
            }
            chatVisible = !chatVisible;
        }
        
        function sendSuggestion(text) {
            document.getElementById('chatInput').value = text;
            sendMessage();
        }
        
        function handleKeyPress(event) {
            if (event.key === 'Enter') {
                sendMessage();
            }
        }
        
        function sendMessage() {
            const input = document.getElementById('chatInput');
            const message = input.value.trim();
            
            if (!message) return;
            
            // Add user message
            addMessage(message, 'user');
            input.value = '';
            
            // Show typing indicator
            showTyping();
            
            // Send to server
            fetch('/chatbot', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ message: message })
            })
            .then(response => response.json())
            .then(data => {
                hideTyping();
                
                if (data.success) {
                    // Add assistant response
                    addMessage(data.message, 'assistant');
                } else {
                    addMessage(data.message || 'Sorry, I encountered an error. Please try again.', 'assistant');
                }
            })
            .catch(error => {
                hideTyping();
                addMessage('Sorry, I encountered an error. Please try again.', 'assistant');
                console.error('Error:', error);
            });
        }
        
        // Markdown to HTML parser for AI responses
        function parseMarkdownToHTML(text) {
            // Convert **bold** to <strong>
            text = text.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
            // Convert headers (lines starting with bold and colon) to <div class="section-title">
            text = text.replace(/<strong>([^<:]+:)<\/strong>/g, '<div class="section-title">$1</div>');
            // Convert numbered lists
            text = text.replace(/\n\d+\. (.*?)(?=\n|$)/g, function(match) {
                return '<li>' + match.replace(/\n\d+\. /g, '') + '</li>';
            });
            // Wrap consecutive <li> in <ol>
            text = text.replace(/(<li>.*?<\/li>)+/g, function(match) {
                return '<ol>' + match + '</ol>';
            });
            // Convert bullet points
            text = text.replace(/\n- (.*?)(?=\n|$)/g, function(match) {
                return '<li>' + match.replace(/\n- /g, '') + '</li>';
            });
            // Wrap consecutive <li> in <ul>
            text = text.replace(/(<li>.*?<\/li>)+/g, function(match) {
                return '<ul>' + match + '</ul>';
            });
            // Convert line breaks
            text = text.replace(/\n/g, '<br>');
            return text;
        }
        
        function addMessage(text, sender) {
            const messagesContainer = document.getElementById('chatMessages');
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${sender}`;
            
            const avatar = document.createElement('div');
            avatar.className = 'message-avatar';
            avatar.textContent = sender === 'user' ? 'U' : 'A';
            
            const content = document.createElement('div');
            content.className = 'message-content';
            if (sender === 'assistant') {
                // Only apply markdown parsing for product-related responses
                const lowerText = text.toLowerCase();
                if (lowerText.includes('product') || lowerText.includes('inventory') || lowerText.includes('stock')) {
                    content.innerHTML = parseMarkdownToHTML(text);
                } else {
                    content.innerHTML = text;
                }
            } else {
                content.textContent = text;
            }
            
            messageDiv.appendChild(avatar);
            messageDiv.appendChild(content);
            messagesContainer.appendChild(messageDiv);
            
            // Scroll to bottom
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }
        
        function showTyping() {
            document.getElementById('typingIndicator').style.display = 'block';
            const messagesContainer = document.getElementById('chatMessages');
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }
        
        function hideTyping() {
            document.getElementById('typingIndicator').style.display = 'none';
        }
        
        function editProduct(productId) {
            // Find the product data from the table
            const productRow = document.querySelector(`tr[data-product-id="${productId}"]`);
            if (!productRow) {
                // If we can't find the row, we'll need to fetch the data
                fetchProductData(productId);
                return;
            }
            
            // Extract data from the table row
            const name = productRow.querySelector('td:nth-child(1) strong').textContent;
            const description = productRow.querySelector('td:nth-child(1) small').textContent;
            const category = productRow.querySelector('td:nth-child(2)').textContent;
            const price = productRow.querySelector('td:nth-child(3)').textContent.replace('₹', '').replace(',', '');
            const stock = productRow.querySelector('td:nth-child(4) span').textContent.replace(' units', '');
            
            // Populate the modal
            document.getElementById('editProductId').value = productId;
            document.getElementById('editProductName').value = name;
            document.getElementById('editProductPrice').value = price;
            document.getElementById('editProductStock').value = stock;
            document.getElementById('editProductCategory').value = category;
            document.getElementById('editProductDescription').value = description;
            
            // Show the modal
            const modal = new bootstrap.Modal(document.getElementById('editProductModal'));
            modal.show();
        }
        
        function fetchProductData(productId) {
            // Fetch product data from server if not available in DOM
            fetch(`/api/products/${productId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        const product = data.product;
                        document.getElementById('editProductId').value = product.id;
                        document.getElementById('editProductName').value = product.name;
                        document.getElementById('editProductPrice').value = product.price;
                        document.getElementById('editProductStock').value = product.stock;
                        document.getElementById('editProductCategory').value = product.category;
                        document.getElementById('editProductDescription').value = product.description || '';
                        
                        const modal = new bootstrap.Modal(document.getElementById('editProductModal'));
                        modal.show();
                    } else {
                        alert('Product not found');
                    }
                })
                .catch(error => {
                    console.error('Error fetching product:', error);
                    alert('Error loading product data');
                });
        }
        
        function saveProductChanges() {
            const productId = document.getElementById('editProductId').value;
            const productData = {
                id: parseInt(productId),
                name: document.getElementById('editProductName').value,
                price: parseFloat(document.getElementById('editProductPrice').value),
                stock: parseInt(document.getElementById('editProductStock').value),
                category: document.getElementById('editProductCategory').value,
                description: document.getElementById('editProductDescription').value
            };
            
            fetch(`/api/products/${productId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(productData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Close modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('editProductModal'));
                    modal.hide();
                    
                    // Show success message
                    showNotification('Product updated successfully!', 'success');
                    
                    // Refresh the page to show updated data
                    setTimeout(() => {
                        location.reload();
                    }, 1000);
                } else {
                    alert('Failed to update product: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error updating product:', error);
                alert('Error updating product');
            });
        }
        
        function updateOrderStatus(orderId) {
            // Find the current status from the table
            const orderRow = document.querySelector(`tr[data-order-id="${orderId}"]`);
            let currentStatus = 'processing';
            
            if (orderRow) {
                const statusBadge = orderRow.querySelector('.status-badge');
                if (statusBadge) {
                    currentStatus = statusBadge.textContent.trim();
                }
            }
            
            // Populate the modal
            document.getElementById('updateOrderId').value = orderId;
            document.getElementById('updateOrderStatus').value = currentStatus;
            
            // Show the modal
            const modal = new bootstrap.Modal(document.getElementById('updateOrderStatusModal'));
            modal.show();
        }
        
        function saveOrderStatusChanges() {
            const orderId = document.getElementById('updateOrderId').value;
            const newStatus = document.getElementById('updateOrderStatus').value;
            
            fetch(`/api/orders/${orderId}/status`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    status: newStatus
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Close modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('updateOrderStatusModal'));
                    modal.hide();
                    
                    // Show success message
                    showNotification(`Order ${orderId} status updated to ${newStatus}!`, 'success');
                    
                    // Refresh the page to show updated data
                    setTimeout(() => {
                        location.reload();
                    }, 1000);
                } else {
                    alert('Failed to update order status: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error updating order status:', error);
                alert('Error updating order status');
            });
        }
        
        function showNotification(message, type = 'info') {
            // Create notification element
            const notification = document.createElement('div');
            notification.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
            notification.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
            notification.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            
            document.body.appendChild(notification);
            
            // Auto remove after 3 seconds
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.remove();
                }
            }, 3000);
        }

        // Handle product form submission from chat
        window.sendProductForm = function(product) {
            // Add user message as a summary
            addMessage(`Add product: ${product.name}, ₹${product.price}, Stock: ${product.stock}, Category: ${product.category}`, 'user');
            showTyping();
            fetch('/chatbot', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ message: '__add_product_form__', productForm: product })
            })
            .then(response => response.json())
            .then(data => {
                hideTyping();
                let cleanResponse = data.response;
                cleanResponse = cleanResponse.replace(/```json[\s\S]*?```/g, '');
                cleanResponse = cleanResponse.replace(/```[\s\S]*?```/g, '');
                cleanResponse = cleanResponse.replace(/\{[\s\S]*\}/g, '');
                cleanResponse = cleanResponse.trim();
                addMessage(cleanResponse, 'assistant');
                if (data.actionExecuted && data.updateResult && data.updateResult.success) {
                    setTimeout(() => {
                        addMessage(`✅ ${data.updateResult.message}`, 'assistant');
                    }, 500);
                }
            })
            .catch(error => {
                hideTyping();
                addMessage('Sorry, I encountered an error. Please try again.', 'assistant');
                console.error('Error:', error);
            });
        }

        // Function to handle form submission
        function handleProductFormSubmission(form) {
            console.log('Handling product form submission');
            const formData = new FormData(form);
            const product = {};
            formData.forEach((v, k) => product[k] = v);
            
            console.log('Product data:', product);
            
            // Disable button and show loading
            const submitBtn = form.querySelector('button[type=submit]');
            submitBtn.disabled = true;
            submitBtn.textContent = 'Adding...';
            
            // Send the form data
            window.sendProductForm(product);
        }

        // Add event delegation for chat forms - using document body for dynamic content
        document.body.addEventListener('submit', function(e) {
            console.log('Form submit event triggered:', e.target.id);
            if (e.target.id === 'addProductFormChat') {
                console.log('Processing addProductFormChat submission');
                e.preventDefault();
                handleProductFormSubmission(e.target);
            }
        });
    </script>
</body>
</html> 