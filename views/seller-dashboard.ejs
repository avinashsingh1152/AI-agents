<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Flipkart Seller Dashboard - <%= sellerData.profile.businessName %></title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        .dashboard-header {
            background: linear-gradient(135deg, #fefa03, #0015ff);
            color: white;
            padding: 20px 0;
            margin-bottom: 30px;
        }
        
        .stats-card {
            background: white;
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            margin-bottom: 20px;
            transition: transform 0.3s ease;
        }
        
        .stats-card:hover {
            transform: translateY(-5px);
        }
        
        .stats-icon {
            font-size: 2.5rem;
            margin-bottom: 15px;
        }
        
        .stats-number {
            font-size: 2rem;
            font-weight: bold;
            color: #2874f0;
        }
        
        .stats-label {
            color: #666;
            font-size: 0.9rem;
            text-transform: uppercase;
            letter-spacing: 1px;
        }
        
        .section-title {
            color: #333;
            font-weight: 600;
            margin-bottom: 20px;
            border-left: 4px solid #2874f0;
            padding-left: 15px;
        }
        
        .table {
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 3px 10px rgba(0,0,0,0.1);
        }
        
        .table thead {
            background: #2874f0;
            color: white;
        }
        
        .btn-flipkart {
            background: #2874f0;
            border: none;
            color: white;
            padding: 8px 20px;
            border-radius: 20px;
            transition: all 0.3s ease;
        }
        
        .btn-flipkart:hover {
            background: #1a5bb8;
            transform: translateY(-2px);
        }
        
        .status-badge {
            padding: 5px 12px;
            border-radius: 15px;
            font-size: 0.8rem;
            font-weight: 500;
        }
        
        .profit-margin {
            font-weight: bold;
            font-size: 0.9rem;
        }
        
        .profit-margin.high { color: #28a745; }
        .profit-margin.medium { color: #ffc107; }
        .profit-margin.low { color: #dc3545; }
        
        .stock-badge {
            padding: 3px 8px;
            border-radius: 10px;
            font-size: 0.8rem;
            font-weight: 500;
        }
        
        .stock-badge.low-stock { background: #f8d7da; color: #721c24; }
        .stock-badge.normal-stock { background: #d1ecf1; color: #0c5460; }
        .stock-badge.high-stock { background: #d4edda; color: #155724; }
        
        .status-processing { background: #f8d7da; color: #721c24; }
        .status-shipped { background: #d1ecf1; color: #0c5460; }
        .status-delivered { background: #d4edda; color: #155724; }
        .status-cancelled { background: #f8d7da; color: #721c24; }
        .status-pending { background: #fff3cd; color: #856404; }
        .status-confirmed { background: #fff3cd; color: #856404; }
        .status-returned { background: #f8d7da; color: #721c24; }
        /* Chat Interface Styles */
        .chat-container {
            position: fixed;
            bottom: 20px;
            right: 20px;
            width: 600px;
            height: 500px;
            background: white;
            border-radius: 20px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            display: flex;
            flex-direction: column;
            z-index: 1000;
            overflow: hidden;
        }
        
        .chat-header {
            background: linear-gradient(135deg, #2874f0, #1a5bb8);
             color: white;
            padding: 15px 20px;
             display: flex;
             align-items: center;
            justify-content: space-between;
        }
        
        .chat-header h6 {
            margin: 0;
            font-weight: 600;
        }
        
        .chat-toggle {
            position: fixed;
            bottom: 20px;
            right: 20px;
            width: 60px;
            height: 60px;
            background: linear-gradient(135deg, #2874f0, #1a5bb8);
            color: white;
            border: none;
            border-radius: 50%;
            font-size: 24px;
            cursor: pointer;
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
            z-index: 1001;
            transition: all 0.3s ease;
        }
        
        .chat-toggle:hover {
            transform: scale(1.1);
        }
        
        .chat-messages {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
            background: #f8f9fa;
        }
        
        .message {
            margin-bottom: 15px;
            display: flex;
            align-items: flex-start;
        }
        
        .message.user {
            justify-content: flex-end;
        }
        
        .message-content {
            max-width: 80%;
            padding: 12px 16px;
            border-radius: 18px;
            font-size: 14px;
            line-height: 1.4;
        }
        
        .message.assistant .message-content {
            background: white;
            color: #333;
            border: 1px solid #e1e5e9;
        }
        
        .message.user .message-content {
            background: #2874f0;
            color: white;
        }
        
        .message-avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            margin: 0 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 14px;
            font-weight: bold;
        }
        
        .message.assistant .message-avatar {
            background: #2874f0;
            color: white;
        }
        
        .message.user .message-avatar {
            background: #28a745;
            color: white;
        }
        
        .chat-input-container {
            padding: 15px 20px;
            border-top: 1px solid #e1e5e9;
            background: white;
        }
        
        .chat-input-group {
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 10px;
            border-top: 1px solid #e9ecef;
        }
        
        .chat-input {
            flex: 1;
            border: 1px solid #e1e5e9;
            border-radius: 25px;
            padding: 10px 15px;
            font-size: 14px;
            outline: none;
        }
        
        .chat-input:focus {
            border-color: #2874f0;
        }
        
        .chat-upload-btn {
            background: #2874f0;
             color: white;
             border: none;
             border-radius: 50%;
            width: 40px;
            height: 40px;
             cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .chat-upload-btn:hover {
            background: #1a5bb8;
        }
        
        .chat-send-btn {
            background: #28a745;
            color: white;
            border: none;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .chat-send-btn:hover {
            background: #1e7e34;
        }
        
        .chat-hidden {
            display: none;
        }
        
        .typing-indicator {
            display: none;
            padding: 12px 16px;
            background: white;
            border-radius: 18px;
            border: 1px solid #e1e5e9;
            margin-bottom: 15px;
        }
        
        .typing-dots {
            display: flex;
            gap: 4px;
        }
        
        .typing-dot {
            width: 8px;
            height: 8px;
            background: #2874f0;
            border-radius: 50%;
            animation: typing 1.4s infinite ease-in-out;
        }
        
        .typing-dot:nth-child(1) { animation-delay: -0.32s; }
        .typing-dot:nth-child(2) { animation-delay: -0.16s; }
        
        @keyframes typing {
            0%, 80%, 100% { transform: scale(0.8); opacity: 0.5; }
            40% { transform: scale(1); opacity: 1; }
        }
        
        .suggestion-chips {
            display: flex;
            gap: 8px;
            margin-top: 10px;
            flex-wrap: wrap;
        }
        
        .suggestion-chip {
            background: #f8f9fa;
            border: 1px solid #e1e5e9;
            border-radius: 15px;
            padding: 6px 12px;
            font-size: 12px;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .suggestion-chip:hover {
            background: #2874f0;
            color: white;
            border-color: #2874f0;
        }
        
        .logout-btn {
            position: absolute;
            top: 20px;
            right: 20px;
            background: rgba(255,255,255,0.2);
            border: 1px solid rgba(255,255,255,0.3);
            color: white;
            padding: 8px 16px;
            border-radius: 20px;
            text-decoration: none;
            transition: all 0.3s ease;
        }
        
        .logout-btn:hover {
            background: rgba(255,255,255,0.3);
            color: white;
        }
        
        /* AI Summary Styles */
        .ai-summary-container {
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            overflow: hidden;
            margin: 15px 0;
        }
        
        .summary-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px;
            text-align: center;
        }
        
        .summary-header h3 {
            margin: 0 0 5px 0;
            font-size: 1.5rem;
            font-weight: 600;
        }
        
        .summary-header p {
            margin: 0;
            opacity: 0.9;
            font-size: 0.9rem;
        }
        
        .summary-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
            padding: 20px;
        }
        
        .summary-card {
            text-align: center;
            padding: 15px;
            background: #f8f9fa;
            border-radius: 8px;
            border: 1px solid #e9ecef;
        }
        
        .summary-card h4 {
            margin: 0 0 10px 0;
            font-size: 0.9rem;
            color: #6c757d;
            font-weight: 600;
        }
        
        .stats-number {
            font-size: 1.5rem;
            font-weight: bold;
            color: #007bff;
        }
        
        .summary-section {
            padding: 20px;
            border-bottom: 1px solid #e9ecef;
        }
        
        .summary-section:last-child {
            border-bottom: none;
        }
        
        .summary-section h4 {
            margin: 0 0 15px 0;
            color: #495057;
            font-size: 1.1rem;
            font-weight: 600;
        }
        
        .insights-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 12px;
        }
        
        .insight-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px 12px;
            background: #f8f9fa;
            border-radius: 6px;
            border: 1px solid #e9ecef;
        }
        
        .insight-label {
            font-weight: 500;
            color: #495057;
            font-size: 0.9rem;
        }
        
        .insight-value {
            font-weight: 600;
            color: #007bff;
            font-size: 0.9rem;
        }
        
        .summary-footer {
            background: #f8f9fa;
            padding: 15px 20px;
            text-align: center;
            border-top: 1px solid #e9ecef;
        }
        
        .summary-footer p {
            margin: 0;
            color: #6c757d;
            font-size: 0.9rem;
        }
        
        .summary-footer a {
            color: #007bff;
            text-decoration: none;
            font-weight: 500;
        }
        
        .summary-footer a:hover {
            text-decoration: underline;
        }
        
        /* Quick Actions Styles */
        .quick-actions-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            gap: 10px;
            margin-bottom: 20px;
        }
        
        .action-item {
            background: #f8f9fa;
            border: 2px solid #e9ecef;
            border-radius: 10px;
            padding: 15px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .action-item:hover {
            background: #2874f0;
            color: white;
            border-color: #2874f0;
            transform: translateY(-2px);
        }
        
        .action-item i {
            font-size: 1.5rem;
            margin-bottom: 8px;
            display: block;
        }
        
        .action-item span {
            font-size: 0.9rem;
            font-weight: 500;
        }
        
        /* Profit Distribution Styles */
        .profit-distribution {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
        }
        
        .profit-category {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 10px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .profit-label {
            font-weight: 600;
            padding: 5px 10px;
            border-radius: 15px;
            font-size: 0.9rem;
        }
        
        .profit-label.high {
            background: #d4edda;
            color: #155724;
        }
        
        .profit-label.medium {
            background: #fff3cd;
            color: #856404;
        }
        
        .profit-label.low {
            background: #f8d7da;
            color: #721c24;
        }
        
        .profit-count {
            font-weight: 600;
            color: #2874f0;
        }
        
        .profit-percentage {
            color: #666;
            font-size: 0.9rem;
        }
        
        /* Alert Styles */
        .alert-summary {
            display: flex;
            flex-direction: column;
            gap: 10px;
        }
        
        .alert-item {
            padding: 12px;
            border-radius: 8px;
            font-weight: 500;
        }
        
        .alert-item.warning {
            background: #fff3cd;
            color: #856404;
            border-left: 4px solid #ffc107;
        }
        
        .alert-item.danger {
            background: #f8d7da;
            color: #721c24;
            border-left: 4px solid #dc3545;
        }
        
        .alert-item.success {
            background: #d4edda;
            color: #155724;
            border-left: 4px solid #28a745;
        }
        
        /* High Value Products */
        .high-value-products {
            max-height: 200px;
            overflow-y: auto;
        }
        
        .top-product {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 10px;
            border-left: 4px solid #28a745;
        }
        
        /* Filter Examples */
        .filter-examples ul {
            list-style: none;
            padding: 0;
        }
        
        .filter-examples li {
            background: #f8f9fa;
            padding: 8px 12px;
            margin-bottom: 5px;
            border-radius: 5px;
            border-left: 3px solid #2874f0;
            font-family: monospace;
            font-size: 0.9rem;
        }
        
        /* Responsive Design */
        @media (max-width: 768px) {
            .summary-grid {
                grid-template-columns: repeat(2, 1fr);
            }
            
            .quick-actions-grid {
                grid-template-columns: repeat(2, 1fr);
            }
            
            .profit-distribution {
                grid-template-columns: 1fr;
            }
            
            .product-item {
                flex-direction: column;
                align-items: flex-start;
                gap: 5px;
            }
            
            .product-item > span {
                flex: none;
            }
        }
        
        /* Prediction and Greeting Styles */
        .quick-insights {
            display: flex;
            flex-direction: column;
            gap: 8px;
            margin: 15px 0;
        }
        
        .insight-card {
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 8px 12px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-radius: 8px;
            font-size: 14px;
        }
        
        .insight-icon {
            font-size: 16px;
            min-width: 20px;
        }
        
        .insight-text {
            font-weight: 500;
        }
        
        .recommendations-list {
            margin: 0;
            padding: 0;
        }
        
        .recommendations-list li {
            margin-bottom: 8px;
            padding: 8px 12px;
            background: #f8f9fa;
            border-left: 4px solid #007bff;
            border-radius: 4px;
            font-size: 14px;
            line-height: 1.4;
        }
        
        .recommendations-list li:last-child {
            margin-bottom: 0;
        }
        
        .csv-upload-info {
            padding: 8px 15px;
            background: #f8f9fa;
            border-top: 1px solid #e9ecef;
            font-size: 12px;
        }
        
        .csv-upload-info a {
            color: #2874f0;
            text-decoration: none;
        }
        
        .csv-upload-info a:hover {
            text-decoration: underline;
        }
        
        .order-list {
            max-height: 300px;
            overflow-y: auto;
            border: 1px solid #e9ecef;
            border-radius: 8px;
            background: #f8f9fa;
        }
        
        .order-item {
            display: grid;
            grid-template-columns: 1fr 1.5fr 2fr 0.5fr 1fr;
            gap: 10px;
            padding: 10px 15px;
            border-bottom: 1px solid #e9ecef;
            font-size: 12px;
            align-items: center;
        }
        
        .order-item:last-child {
            border-bottom: none;
        }
        
        .order-item-more {
            text-align: center;
            padding: 10px;
            color: #6c757d;
            font-style: italic;
        }
        
        .order-id {
            font-weight: bold;
            color: #2874f0;
        }
        
        .customer-name {
            color: #495057;
        }
        
        .product-name {
            color: #495057;
        }
        
        .quantity {
            text-align: center;
            background: #e9ecef;
            padding: 2px 6px;
            border-radius: 4px;
            font-weight: bold;
        }
        
        .total {
            font-weight: bold;
            color: #28a745;
            text-align: right;
        }
    </style>
</head>
<body>
    <!-- Dashboard Header -->
    <div class="dashboard-header">
        <div class="container">
            <div class="row align-items-center">
                <div class="col-md-12">
                    <h2><i class="fas fa-shopping-cart"></i> Flipkart Seller Dashboard</h2>
                    <div class="d-flex align-items-center">
                        <h4 class="mb-0">Welcome, <%= sellerData.profile.ownerName %></h4>
                        <h5 class="mb-0 ms-3 text-light">(<%= sellerData.profile.businessName %>)</h5>
                        <div class="ms-auto d-flex justify-content-end">
                            <a href="/order-history-page" class="btn btn-outline-warning me-2">
                                <i class="fas fa-history"></i> Order History
                            </a>
                            <a href="/product-history" class="btn btn-outline-secondary me-2">
                                <i class="fas fa-chart-line"></i> Product History
                            </a>
                            <a href="/whatsapp" class="btn btn-success me-2">
                                <i class="fab fa-whatsapp"></i>
                            </a>
                            <a href="/profile" class="btn btn-outline-primary me-2">
                                <i class="fas fa-user"></i>
                            </a>
                            <a href="/chat-logs" class="btn btn-outline-info me-2">
                                <i class="fas fa-comments"></i>
                            </a>
                            <a href="/logout" class="btn btn-outline-danger">
                                <i class="fas fa-sign-out-alt"></i> 
                            </a>
                </div>
                </div>
                </div>
            </div>
        </div>
    </div>

    <div class="container">
        <!-- Analytics Section -->
        <div class="row mb-4">
            <div class="col-md-3">
                <div class="stats-card text-center">
                    <div class="stats-icon text-primary">
                        <i class="fas fa-rupee-sign"></i>
                    </div>
                    <div class="stats-number">₹<%= sellerData.analytics.totalRevenue.toLocaleString() %></div>
                    <div class="stats-label">Total Revenue</div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="stats-card text-center">
                    <div class="stats-icon text-success">
                        <i class="fas fa-shopping-bag"></i>
                    </div>
                    <div class="stats-number"><%= sellerData.analytics.totalOrders %></div>
                    <div class="stats-label">Total Orders</div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="stats-card text-center">
                    <div class="stats-icon text-warning">
                        <i class="fas fa-clock"></i>
                    </div>
                    <div class="stats-number"><%= sellerData.analytics.pendingOrders %></div>
                    <div class="stats-label">Pending Orders</div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="stats-card text-center">
                    <div class="stats-icon text-danger">
                        <i class="fas fa-exclamation-triangle"></i>
                    </div>
                    <div class="stats-number"><%= sellerData.analytics.lowStockItems %></div>
                    <div class="stats-label">Low Stock Items</div>
                </div>
            </div>
        </div>

        <!-- Products Section with Advanced Filters -->
        <div class="row mb-4">
            <div class="col-12">
                <h4 class="section-title">
                    <i class="fas fa-box"></i> Products Inventory
                </h4>
                
                <!-- Advanced Filter Panel -->
                <div class="card mb-3">
                    <div class="card-header">
                        <h6 class="mb-0">
                            <i class="fas fa-filter"></i> Advanced Filters & Smart Suggestions
                        </h6>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-3">
                                <label class="form-label">Category</label>
                                <select class="form-select" id="categoryFilter" onchange="applyAdvancedFilters()">
                                    <option value="">All Categories</option>
                                    <option value="Electronics">Electronics</option>
                                    <option value="Accessories">Accessories</option>
                                    <option value="Office Supplies">Office Supplies</option>
                                    <option value="Home & Garden">Home & Garden</option>
                                    <option value="Fashion">Fashion</option>
                                    <option value="Automotive">Automotive</option>
                                    <option value="Sports & Outdoors">Sports & Outdoors</option>
                                    <option value="Books & Media">Books & Media</option>
                                </select>
                    </div>
                            <div class="col-md-3">
                                <label class="form-label">Price Range</label>
                                <div class="input-group">
                                    <input type="number" class="form-control" id="minPrice" placeholder="Min" onchange="applyAdvancedFilters()">
                                    <span class="input-group-text">-</span>
                                    <input type="number" class="form-control" id="maxPrice" placeholder="Max" onchange="applyAdvancedFilters()">
                </div>
            </div>
                            <div class="col-md-3">
                                <label class="form-label">Stock Level</label>
                                <select class="form-select" id="stockFilter" onchange="applyAdvancedFilters()">
                                    <option value="">All Stock Levels</option>
                                    <option value="low">Low Stock (< 10)</option>
                                    <option value="medium">Medium Stock (10-50)</option>
                                    <option value="high">High Stock (> 50)</option>
                                </select>
                    </div>
                            <div class="col-md-3">
                                <label class="form-label">Profit Margin</label>
                                <select class="form-select" id="profitFilter" onchange="applyAdvancedFilters()">
                                    <option value="">All Margins</option>
                                    <option value="low">Low (< 15%)</option>
                                    <option value="medium">Medium (15-30%)</option>
                                    <option value="high">High (> 30%)</option>
                                </select>
                            </div>
                        </div>
                        <div class="row mt-3">
                            <div class="col-md-6">
                                <label class="form-label">Smart Suggestions</label>
                                <div id="smartSuggestions" class="alert alert-info">
                                    <strong>💡 Smart Insights:</strong>
                                    <ul class="mb-0 mt-2">
                                        <li>Products with low stock may need restocking</li>
                                        <li>High-profit items could be promoted</li>
                                        <li>Low-performing products may need price adjustments</li>
                                    </ul>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Quick Actions</label>
                                <div class="d-grid gap-2">
                                    <button class="btn btn-warning btn-sm" onclick="showLowStockAlert()">
                                        <i class="fas fa-exclamation-triangle"></i> Low Stock Alert
                                    </button>
                                    <button class="btn btn-success btn-sm" onclick="showHighProfitProducts()">
                                        <i class="fas fa-chart-line"></i> High Profit Products
                                    </button>
                                    <button class="btn btn-info btn-sm" onclick="showPredictionAnalysis()">
                                        <i class="fas fa-crystal-ball"></i> Sales Prediction
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                        <div class="table-responsive">
                    <table class="table table-hover">
                                <thead>
                                    <tr>
                                <th>Product Name<br><input type="text" class="form-control form-control-sm column-filter" placeholder="Filter" oninput="filterTable(0, this.value)"></th>
                                <th>Category<br><input type="text" class="form-control form-control-sm column-filter" placeholder="Filter" oninput="filterTable(1, this.value)"></th>
                                <th>Price<br><input type="text" class="form-control form-control-sm column-filter" placeholder="Filter" oninput="filterTable(2, this.value)"></th>
                                <th>Purchase Price<br><input type="text" class="form-control form-control-sm column-filter" placeholder="Filter" oninput="filterTable(3, this.value)"></th>
                                <th>Profit Margin<br><input type="text" class="form-control form-control-sm column-filter" placeholder="Filter" oninput="filterTable(4, this.value)"></th>
                                <th>Stock<br><input type="text" class="form-control form-control-sm column-filter" placeholder="Filter" oninput="filterTable(5, this.value)"></th>
                                <th>Units Sold<br><input type="text" class="form-control form-control-sm column-filter" placeholder="Filter" oninput="filterTable(6, this.value)"></th>
                                <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <% sellerData.products.forEach(product => { %>
                            <tr data-product-id="<%= product.id %>">
                                <td><strong><%= product.name %></strong></td>
                                <td><%= product.category %></td>
                                <td>₹<%= product.price.toLocaleString() %></td>
                                <td>₹<%= (product.purchase_price || 0).toLocaleString() %></td>
                                <td>
                                    <span class="profit-margin <%= (product.profit_margin || 0) >= 30 ? 'high' : (product.profit_margin || 0) >= 15 ? 'medium' : 'low' %>">
                                        <%= (product.profit_margin || 0).toFixed(1) %>%
                                    </span>
                                        </td>
                                <td>
                                    <span class="stock-badge <%= product.stock < 10 ? 'low-stock' : product.stock > 50 ? 'high-stock' : 'normal-stock' %>">
                                        <%= product.stock %>
                                    </span>
                                </td>
                                <td><%= (product.units_sold || 0).toLocaleString() %></td>
                                <td>
                                    <button class="btn btn-sm btn-flipkart" onclick="editProduct(<%= product.id %>)">
                                        <i class="fas fa-edit"></i> Edit
                                    </button>
                                </td>
                                    </tr>
                                    <% }); %>
                                </tbody>
                            </table>
                </div>
            </div>
        </div>

        <!-- Orders Section -->
        <div class="row mb-4">
            <div class="col-12">
                <h4 class="section-title">
                    <i class="fas fa-list-alt"></i> Recent Orders
                </h4>
                        <div class="table-responsive">
                    <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>Order ID</th>
                                        <th>Customer</th>
                                        <th>Products</th>
                                        <th>Total</th>
                                        <th>Status</th>
                                        <th>Date</th>
                                <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <% sellerData.orders.forEach(order => { %>
                            <tr data-order-id="<%= order.id %>">
                                <td><strong><%= order.id %></strong></td>
                                        <td><%= order.customerName %></td>
                                        <td><%= order.products.join(', ') %></td>
                                <td>₹<%= order.total.toLocaleString() %></td>
                                <td>
                                    <span class="status-badge status-<%= order.status %>">
                                        <%= order.status %>
                                    </span>
                                </td>
                                <td><%= formatDate(order.order_date) %></td>
                                <td>
                                    <button class="btn btn-sm btn-flipkart" onclick="updateOrderStatus('<%= order.id %>')">
                                        <i class="fas fa-edit"></i> Update Status
                                    </button>
                                </td>
                                    </tr>
                                    <% }); %>
                                </tbody>
                            </table>
                        </div>
            </div>
        </div>

        <!-- Payment Management Section -->
        <div class="row mb-4">
            <div class="col-md-3">
                <div class="card text-center">
                    <div class="card-body">
                        <i class="fas fa-credit-card fa-3x text-primary mb-3"></i>
                        <h5 class="card-title">Payment Management</h5>
                        <p class="card-text">Track payments, disputes, and transactions</p>
                        <a href="/payment-details" class="btn btn-primary">View Payments</a>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Product Edit Modal -->
    <div class="modal fade" id="editProductModal" tabindex="-1" aria-labelledby="editProductModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editProductModalLabel">Edit Product</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="editProductForm">
                        <input type="hidden" id="editProductId">
                        <div class="mb-3">
                            <label for="editProductName" class="form-label">Product Name</label>
                            <input type="text" class="form-control" id="editProductName" required>
                        </div>
                        <div class="mb-3">
                            <label for="editProductPrice" class="form-label">Price (₹)</label>
                            <input type="number" class="form-control" id="editProductPrice" min="0" step="0.01" required>
                        </div>
                        <div class="mb-3">
                            <label for="editProductStock" class="form-label">Stock</label>
                            <input type="number" class="form-control" id="editProductStock" min="0" required>
                        </div>
                        <div class="mb-3">
                            <label for="editProductCategory" class="form-label">Category</label>
                            <select class="form-control" id="editProductCategory" required>
                                <option value="Electronics">Electronics</option>
                                <option value="Accessories">Accessories</option>
                                <option value="Office Supplies">Office Supplies</option>
                                <option value="Home & Garden">Home & Garden</option>
                                <option value="Fashion">Fashion</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="editProductDescription" class="form-label">Description</label>
                            <textarea class="form-control" id="editProductDescription" rows="3"></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-flipkart" onclick="saveProductChanges()">Save Changes</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Order Status Update Modal -->
    <div class="modal fade" id="updateOrderStatusModal" tabindex="-1" aria-labelledby="updateOrderStatusModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="updateOrderStatusModalLabel">Update Order Status</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="updateOrderStatusForm">
                        <input type="hidden" id="updateOrderId">
                        <div class="mb-3">
                            <label for="updateOrderStatus" class="form-label">Order Status</label>
                            <select class="form-control" id="updateOrderStatus" required>
                                <option value="processing">Processing</option>
                                <option value="confirmed">Confirmed</option>
                                <option value="shipped">Shipped</option>
                                <option value="delivered">Delivered</option>
                                <option value="cancelled">Cancelled</option>
                                <option value="returned">Returned</option>
                            </select>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-flipkart" onclick="saveOrderStatusChanges()">Update Status</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Chat Toggle Button -->
    <button class="chat-toggle" onclick="toggleChat()" id="chatToggle">
        <i class="fas fa-comments"></i>
    </button>

    <!-- Chat Container -->
    <div class="chat-container chat-hidden" id="chatContainer">
        <div class="chat-header">
            <h6><i class="fas fa-robot"></i> Flipkart Assistant</h6>
            <button class="btn btn-sm btn-light" onclick="toggleChat()">
                <i class="fas fa-times"></i>
            </button>
        </div>
        
        <div class="chat-messages" id="chatMessages">
            <div class="message assistant">
                <div class="message-avatar">A</div>
                <div class="message-content">
                    Hello! I'm your Flipkart seller assistant. I can help you manage your products, orders, payments, and provide business insights. Try asking me to:
                    <div class="suggestion-chips">
                        <div class="suggestion-chip" onclick="sendSuggestion('Show me business forecast')">📊 Business Forecast</div>
                        <div class="suggestion-chip" onclick="sendSuggestion('Show me payment analytics')">💳 Payment Analytics</div>
                        <div class="suggestion-chip" onclick="sendSuggestion('Update the price of Wireless Bluetooth Headphones to ₹6999')">Update product price</div>
                        <div class="suggestion-chip" onclick="sendSuggestion('Change order ORD003 status to shipped')">Update order status</div>
                        <div class="suggestion-chip" onclick="sendSuggestion('Add a new product called Gaming Mouse')">Add new product</div>
                        <div class="suggestion-chip" onclick="sendSuggestion('What should I focus on this month?')">🎯 Strategic Advice</div>
            </div>
        </div>
        </div>
        </div>
        
        <div class="typing-indicator" id="typingIndicator">
            <div class="typing-dots">
                <div class="typing-dot"></div>
                <div class="typing-dot"></div>
                <div class="typing-dot"></div>
            </div>
        </div>
        
        <div class="chat-input-container">
            <div class="chat-input-group">
                <input type="text" class="chat-input" id="chatInput" placeholder="Ask me anything about your business..." onkeypress="handleKeyPress(event)">
                <input type="file" id="csvFileInput" accept=".csv" style="display: none;" onchange="handleCSVUpload(event)">
                <button class="chat-upload-btn" onclick="document.getElementById('csvFileInput').click()" title="Upload CSV Orders">
                    <i class="fas fa-file-upload"></i>
                </button>
                <button class="chat-send-btn" onclick="sendMessage()">
                    <i class="fas fa-paper-plane"></i>
                </button>
            </div>
            <div class="csv-upload-info" id="csvUploadInfo" style="display: none;">
                <small class="text-muted">📁 <a href="/demo-orders.csv" download>Download Demo CSV</a> | Supported format: order_id,customer_name,product_name,quantity,unit_price,total_amount,order_date,status</small>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        let chatVisible = false;
        
        function toggleChat() {
            const container = document.getElementById('chatContainer');
            const toggle = document.getElementById('chatToggle');
            
            if (chatVisible) {
                container.classList.add('chat-hidden');
                toggle.style.display = 'block';
            } else {
                container.classList.remove('chat-hidden');
                toggle.style.display = 'none';
            }
            chatVisible = !chatVisible;
        }
        
        function sendSuggestion(text) {
            document.getElementById('chatInput').value = text;
            sendMessage();
        }
        
        function handleKeyPress(event) {
            if (event.key === 'Enter') {
                sendMessage();
            }
        }
        
        function sendMessage() {
            const input = document.getElementById('chatInput');
            const message = input.value.trim();
            
            if (!message) return;
            
            // Add user message
            addMessage(message, 'user');
            input.value = '';
            
            // Show typing indicator
            showTyping();
            
            // Send to server
            fetch('/chatbot', {
                    method: 'POST',
                    headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ message: message })
            })
            .then(response => response.json())
            .then(data => {
                hideTyping();
                
                if (data.success) {
                    // Add assistant response
                    addMessage(data.message, 'assistant');
                } else {
                    addMessage(data.message || 'Sorry, I encountered an error. Please try again.', 'assistant');
                }
            })
            .catch(error => {
                hideTyping();
                addMessage('Sorry, I encountered an error. Please try again.', 'assistant');
                console.error('Error:', error);
            });
        }
        
        // Markdown to HTML parser for AI responses
        function parseMarkdownToHTML(text) {
            // If the text already contains HTML tags, don't apply markdown formatting
            if (text.includes('<div') || text.includes('<span') || text.includes('<h') || text.includes('<p>')) {
                return text;
            }
            
            let formatted = text
                // Bold text
                .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
                // Italic text
                .replace(/\*(.*?)\*/g, '<em>$1</em>')
                // Code blocks
                .replace(/```(.*?)```/gs, '<code>$1</code>')
                // Inline code
                .replace(/`(.*?)`/g, '<code>$1</code>')
                // Headers
                .replace(/^### (.*$)/gm, '<h3>$1</h3>')
                .replace(/^## (.*$)/gm, '<h2>$1</h2>')
                .replace(/^# (.*$)/gm, '<h1>$1</h1>')
                // Lists
                .replace(/^- (.*$)/gm, '<li>$1</li>')
                .replace(/^\d+\. (.*$)/gm, '<li>$1</li>');
            
            // Wrap lists in proper tags
            formatted = formatted.replace(/(<li>.*<\/li>)/gs, function(match) {
                return '<ul>' + match + '</ul>';
            });
            // Convert line breaks only for non-HTML content
            formatted = formatted.replace(/\n/g, '<br>');
            return formatted;
        }
        
        function addMessage(text, sender) {
            const messagesContainer = document.getElementById('chatMessages');
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${sender}`;
            
            const avatar = document.createElement('div');
            avatar.className = 'message-avatar';
            avatar.textContent = sender === 'user' ? 'U' : 'A';
            
            const content = document.createElement('div');
            content.className = 'message-content';
            if (sender === 'assistant') {
                // Check if the response is already HTML formatted
                if (text.includes('<div') || text.includes('<span') || text.includes('<h') || text.includes('<p>')) {
                    content.innerHTML = text;
                } else {
                    // Only apply markdown parsing for non-HTML responses
                    const lowerText = text.toLowerCase();
                    if (lowerText.includes('product') || lowerText.includes('inventory') || lowerText.includes('stock')) {
                        content.innerHTML = parseMarkdownToHTML(text);
                    } else {
                        content.innerHTML = text;
                    }
                }
            } else {
                content.textContent = text;
            }
            
            messageDiv.appendChild(avatar);
            messageDiv.appendChild(content);
            messagesContainer.appendChild(messageDiv);
            
            // Scroll to bottom
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }
        
        function showTyping() {
            document.getElementById('typingIndicator').style.display = 'block';
            const messagesContainer = document.getElementById('chatMessages');
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }
        
        function hideTyping() {
            document.getElementById('typingIndicator').style.display = 'none';
        }
        
        function editProduct(productId) {
            // Find the product data from the table
            const productRow = document.querySelector(`tr[data-product-id="${productId}"]`);
            if (!productRow) {
                // If we can't find the row, we'll need to fetch the data
                fetchProductData(productId);
                return;
            }
            
            // Extract data from the table row based on actual structure
            const name = productRow.querySelector('td:nth-child(1) strong').textContent;
            const category = productRow.querySelector('td:nth-child(2)').textContent;
            const price = productRow.querySelector('td:nth-child(3)').textContent.replace('₹', '').replace(/,/g, '');
            const stock = productRow.querySelector('td:nth-child(6) span').textContent;
            let description = '';
            
            document.getElementById('editProductId').value = productId;
            document.getElementById('editProductName').value = name;
            document.getElementById('editProductPrice').value = price;
            document.getElementById('editProductStock').value = stock;
            document.getElementById('editProductCategory').value = category;
            document.getElementById('editProductDescription').value = description;
            
            const modal = new bootstrap.Modal(document.getElementById('editProductModal'));
            modal.show();
        }
        
        function fetchProductData(productId) {
            // Fetch product data from server if not available in DOM
            fetch(`/api/products/${productId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        const product = data.product;
                        document.getElementById('editProductId').value = product.id;
                        document.getElementById('editProductName').value = product.name;
                        document.getElementById('editProductPrice').value = product.price;
                        document.getElementById('editProductStock').value = product.stock;
                        document.getElementById('editProductCategory').value = product.category;
                        document.getElementById('editProductDescription').value = product.description || '';
                        
                        const modal = new bootstrap.Modal(document.getElementById('editProductModal'));
                        modal.show();
                    } else {
                        alert('Product not found');
                    }
                })
                .catch(error => {
                    console.error('Error fetching product:', error);
                    alert('Error loading product data');
                });
        }
        
        function saveProductChanges() {
            const productId = document.getElementById('editProductId').value;
            const productData = {
                id: parseInt(productId),
                name: document.getElementById('editProductName').value,
                price: parseFloat(document.getElementById('editProductPrice').value),
                stock: parseInt(document.getElementById('editProductStock').value),
                category: document.getElementById('editProductCategory').value,
                description: document.getElementById('editProductDescription').value
            };
            
            fetch(`/api/products/${productId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(productData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Close modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('editProductModal'));
                    modal.hide();
                    
                    // Show success message
                    showNotification('Product updated successfully!', 'success');
                    
                    // Refresh the page to show updated data
                    setTimeout(() => {
                        location.reload();
                    }, 1000);
                } else {
                    alert('Failed to update product: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error updating product:', error);
                alert('Error updating product');
            });
        }
        
        function updateOrderStatus(orderId) {
            // Find the current status from the table
            const orderRow = document.querySelector(`tr[data-order-id="${orderId}"]`);
            let currentStatus = 'processing';
            
            if (orderRow) {
                const statusBadge = orderRow.querySelector('.status-badge');
                if (statusBadge) {
                    currentStatus = statusBadge.textContent.trim();
                }
            }
            
            // Populate the modal
            document.getElementById('updateOrderId').value = orderId;
            document.getElementById('updateOrderStatus').value = currentStatus;
            
            // Show the modal
            const modal = new bootstrap.Modal(document.getElementById('updateOrderStatusModal'));
            modal.show();
        }
        
        function saveOrderStatusChanges() {
            const orderId = document.getElementById('updateOrderId').value;
            const newStatus = document.getElementById('updateOrderStatus').value;
            
            fetch(`/api/orders/${orderId}/status`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    status: newStatus
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Close modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('updateOrderStatusModal'));
                    modal.hide();
                    
                    // Show success message
                    showNotification(`Order ${orderId} status updated to ${newStatus}!`, 'success');
                    
                    // Refresh the page to show updated data
                    setTimeout(() => {
                        location.reload();
                    }, 1000);
                } else {
                    alert('Failed to update order status: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error updating order status:', error);
                alert('Error updating order status');
            });
        }
        
        function showNotification(message, type = 'info') {
            // Create notification element
            const notification = document.createElement('div');
            notification.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
            notification.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
            notification.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            
            document.body.appendChild(notification);
            
            // Auto remove after 3 seconds
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.remove();
                }
            }, 3000);
        }

        // Handle product form submission from chat
        window.sendProductForm = function(product) {
            // Add user message as a summary
            addMessage(`Add product: ${product.name}, ₹${product.price}, Stock: ${product.stock}, Category: ${product.category}`, 'user');
            showTyping();
            fetch('/chatbot', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ message: '__add_product_form__', productForm: product })
            })
            .then(response => response.json())
            .then(data => {
                hideTyping();
                let cleanResponse = data.response;
                cleanResponse = cleanResponse.replace(/```json[\s\S]*?```/g, '');
                cleanResponse = cleanResponse.replace(/```[\s\S]*?```/g, '');
                cleanResponse = cleanResponse.replace(/\{[\s\S]*\}/g, '');
                cleanResponse = cleanResponse.trim();
                addMessage(cleanResponse, 'assistant');
                if (data.actionExecuted && data.updateResult && data.updateResult.success) {
                    setTimeout(() => {
                        addMessage(`✅ ${data.updateResult.message}`, 'assistant');
                    }, 500);
                }
            })
            .catch(error => {
                hideTyping();
                addMessage('Sorry, I encountered an error. Please try again.', 'assistant');
                console.error('Error:', error);
            });
        }

        // Function to handle form submission
        function handleProductFormSubmission(form) {
            console.log('Handling product form submission');
            const formData = new FormData(form);
            const product = {};
            formData.forEach((v, k) => product[k] = v);
            
            console.log('Product data:', product);
            
            // Disable button and show loading
            const submitBtn = form.querySelector('button[type=submit]');
            submitBtn.disabled = true;
            submitBtn.textContent = 'Adding...';
            
            // Send the form data
            window.sendProductForm(product);
        }

        // Add event delegation for chat forms - using document body for dynamic content
        document.body.addEventListener('submit', function(e) {
            console.log('Form submit event triggered:', e.target.id);
            if (e.target.id === 'addProductFormChat') {
                console.log('Processing addProductFormChat submission');
                e.preventDefault();
                handleProductFormSubmission(e.target);
            }
        });

        function filterTable(colIndex, filterValue) {
            const table = document.querySelector('.table.table-hover');
            const rows = table.querySelectorAll('tbody tr');
            filterValue = filterValue.toLowerCase();
            rows.forEach(row => {
                const cell = row.children[colIndex];
                if (!cell) return;
                const text = cell.textContent.toLowerCase();
                if (text.includes(filterValue)) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
        }

        // Advanced filtering function
        function applyAdvancedFilters() {
            const categoryFilter = document.getElementById('categoryFilter').value;
            const minPrice = document.getElementById('minPrice').value;
            const maxPrice = document.getElementById('maxPrice').value;
            const stockFilter = document.getElementById('stockFilter').value;
            const profitFilter = document.getElementById('profitFilter').value;
            
            const rows = document.querySelectorAll('.table.table-hover tbody tr');
            
            rows.forEach(row => {
                let show = true;
                
                // Category filter
                if (categoryFilter && row.children[1].textContent.trim() !== categoryFilter) {
                    show = false;
                }
                
                // Price range filter
                const price = parseFloat(row.children[2].textContent.replace('₹', '').replace(',', ''));
                if (minPrice && price < parseFloat(minPrice)) show = false;
                if (maxPrice && price > parseFloat(maxPrice)) show = false;
                
                // Stock level filter
                const stock = parseInt(row.children[5].textContent);
                if (stockFilter === 'low' && stock >= 10) show = false;
                if (stockFilter === 'medium' && (stock < 10 || stock > 50)) show = false;
                if (stockFilter === 'high' && stock <= 50) show = false;
                
                // Profit margin filter
                const profitMargin = parseFloat(row.children[4].textContent.replace('%', ''));
                if (profitFilter === 'low' && profitMargin >= 15) show = false;
                if (profitFilter === 'medium' && (profitMargin < 15 || profitMargin > 30)) show = false;
                if (profitFilter === 'high' && profitMargin <= 30) show = false;
                
                row.style.display = show ? '' : 'none';
            });
            
            updateSmartSuggestions();
        }

        // Update smart suggestions based on current data
        function updateSmartSuggestions() {
            const visibleRows = Array.from(document.querySelectorAll('.table.table-hover tbody tr')).filter(row => row.style.display !== 'none');
            const suggestions = [];
            
            // Analyze visible products
            const lowStockProducts = visibleRows.filter(row => parseInt(row.children[5].textContent) < 10).length;
            const highProfitProducts = visibleRows.filter(row => parseFloat(row.children[4].textContent.replace('%', '')) > 30).length;
            const lowProfitProducts = visibleRows.filter(row => parseFloat(row.children[4].textContent.replace('%', '')) < 15).length;
            
            if (lowStockProducts > 0) {
                suggestions.push(`${lowStockProducts} products need restocking`);
            }
            if (highProfitProducts > 0) {
                suggestions.push(`${highProfitProducts} high-profit products available for promotion`);
            }
            if (lowProfitProducts > 0) {
                suggestions.push(`${lowProfitProducts} products may need price optimization`);
            }
            
            const suggestionsDiv = document.getElementById('smartSuggestions');
            if (suggestions.length > 0) {
                suggestionsDiv.innerHTML = `<strong>💡 Smart Insights:</strong><ul class="mb-0 mt-2">${suggestions.map(s => `<li>${s}</li>`).join('')}</ul>`;
            } else {
                suggestionsDiv.innerHTML = '<strong>✅ All products are performing well!</strong>';
            }
        }

        // Show low stock alert
        function showLowStockAlert() {
            const rows = document.querySelectorAll('.table.table-hover tbody tr');
            const lowStockProducts = [];
            
            rows.forEach(row => {
                const stock = parseInt(row.children[5].textContent);
                if (stock < 10) {
                    lowStockProducts.push({
                        name: row.children[0].textContent.trim(),
                        stock: stock,
                        price: row.children[2].textContent
                    });
                }
            });
            
            if (lowStockProducts.length > 0) {
                const alertHtml = `
                    <div class="alert alert-warning">
                        <h6><i class="fas fa-exclamation-triangle"></i> Low Stock Alert</h6>
                        <ul class="mb-0">
                            ${lowStockProducts.map(p => `<li><strong>${p.name}</strong> - Only ${p.stock} left (${p.price})</li>`).join('')}
                        </ul>
                    </div>
                `;
                showModal('Low Stock Alert', alertHtml);
            } else {
                showModal('Low Stock Alert', '<div class="alert alert-success">✅ All products have sufficient stock!</div>');
            }
        }

        // Show high profit products
        function showHighProfitProducts() {
            const rows = document.querySelectorAll('.table.table-hover tbody tr');
            const highProfitProducts = [];
            
            rows.forEach(row => {
                const profitMargin = parseFloat(row.children[4].textContent.replace('%', ''));
                if (profitMargin > 30) {
                    highProfitProducts.push({
                        name: row.children[0].textContent.trim(),
                        profit: profitMargin,
                        price: row.children[2].textContent,
                        stock: row.children[5].textContent
                    });
                }
            });
            
            if (highProfitProducts.length > 0) {
                const alertHtml = `
                    <div class="alert alert-success">
                        <h6><i class="fas fa-chart-line"></i> High Profit Products</h6>
                        <ul class="mb-0">
                            ${highProfitProducts.map(p => `<li><strong>${p.name}</strong> - ${p.profit.toFixed(1)}% profit (${p.price}, Stock: ${p.stock})</li>`).join('')}
                        </ul>
                        <p class="mt-2 mb-0"><strong>💡 Suggestion:</strong> Consider promoting these high-margin products!</p>
                    </div>
                `;
                showModal('High Profit Products', alertHtml);
            } else {
                showModal('High Profit Products', '<div class="alert alert-info">No products with >30% profit margin found.</div>');
            }
        }

        // Show sales prediction analysis
        function showPredictionAnalysis() {
            const rows = document.querySelectorAll('.table.table-hover tbody tr');
            const predictions = [];
            
            rows.forEach(row => {
                const name = row.children[0].textContent.trim();
                const stock = parseInt(row.children[5].textContent);
                const unitsSold = parseInt(row.children[6].textContent);
                const profitMargin = parseFloat(row.children[4].textContent.replace('%', ''));
                
                // Simple prediction based on historical data and current metrics
                let prediction = 'Stable';
                let suggestion = 'Maintain current strategy';
                
                if (unitsSold > 20 && stock < 20) {
                    prediction = 'High Demand';
                    suggestion = 'Consider restocking soon';
                } else if (unitsSold < 5 && stock > 50) {
                    prediction = 'Low Demand';
                    suggestion = 'Consider promotions or price adjustments';
                } else if (profitMargin > 40) {
                    prediction = 'High Profit Potential';
                    suggestion = 'Great margin, focus on sales';
                }
                
                predictions.push({ name, prediction, suggestion, stock, unitsSold, profitMargin });
            });
            
            const alertHtml = `
                <div class="alert alert-info">
                    <h6><i class="fas fa-crystal-ball"></i> Sales Prediction Analysis</h6>
                    <div class="table-responsive">
                        <table class="table table-sm">
                            <thead>
                                <tr>
                                    <th>Product</th>
                                    <th>Prediction</th>
                                    <th>Suggestion</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${predictions.map(p => `
                                    <tr>
                                        <td><strong>${p.name}</strong></td>
                                        <td><span class="badge bg-${p.prediction === 'High Demand' ? 'success' : p.prediction === 'Low Demand' ? 'warning' : 'info'}">${p.prediction}</span></td>
                                        <td>${p.suggestion}</td>
                                    </tr>
                                `).join('')}
                            </tbody>
                        </table>
                    </div>
                </div>
            `;
            showModal('Sales Prediction Analysis', alertHtml);
        }

        // Generic modal function
        function showModal(title, content) {
            const modalHtml = `
                <div class="modal fade" id="analysisModal" tabindex="-1">
                    <div class="modal-dialog modal-lg">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">${title}</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                            </div>
                            <div class="modal-body">
                                ${content}
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            
            // Remove existing modal if any
            const existingModal = document.getElementById('analysisModal');
            if (existingModal) {
                existingModal.remove();
            }
            
            // Add new modal
            document.body.insertAdjacentHTML('beforeend', modalHtml);
            
            // Show modal
            const modal = new bootstrap.Modal(document.getElementById('analysisModal'));
            modal.show();
        }

        // Initialize smart suggestions on page load
        document.addEventListener('DOMContentLoaded', function() {
            updateSmartSuggestions();
        });

        // CSV Upload Functions
        function handleCSVUpload(event) {
            const file = event.target.files[0];
            if (!file) return;
            
            if (!file.name.toLowerCase().endsWith('.csv')) {
                alert('Please select a CSV file');
                return;
            }
            
            const reader = new FileReader();
            reader.onload = function(e) {
                const csvData = e.target.result;
                processCSVOrders(csvData);
            };
            reader.readAsText(file);
            
            // Reset file input
            event.target.value = '';
        }
        
        function processCSVOrders(csvData) {
            // Add user message showing CSV upload
            addMessage('📁 Uploading CSV orders...', 'user');
            
            // Show typing indicator
            showTyping();
            
            // Send to server for processing
            fetch('/chatbot', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ 
                    message: 'Process the following orders via upload csv',
                    csvData: csvData
                })
            })
            .then(response => response.json())
            .then(data => {
                hideTyping();
                
                if (data.success) {
                    // Add assistant response
                    addMessage(data.message, 'assistant');
                } else {
                    addMessage(data.message || 'Sorry, I encountered an error processing the CSV. Please try again.', 'assistant');
                }
            })
            .catch(error => {
                hideTyping();
                addMessage('Sorry, I encountered an error processing the CSV. Please try again.', 'assistant');
                console.error('Error:', error);
            });
        }
        
        // Show CSV upload info when hovering over upload button
        function showCSVInfo() {
            document.getElementById('csvUploadInfo').style.display = 'block';
        }
        
        function hideCSVInfo() {
            document.getElementById('csvUploadInfo').style.display = 'none';
        }
    </script>
</body>
</html> 